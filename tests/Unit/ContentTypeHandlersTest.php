<?php

use App\Handlers\ContentType\JsonHalHandler;
use Tests\TestCase;

class ContentTypeHandlersTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->content = [
            [
                "id" => 2,
                "mmsi" => 247039300,
                "status" => 0,
                "stationId" => 82,
                "speed" => 154,
                "lon" => "16.21578",
                "lat" => "42.03212",
                "course" => 149,
                "heading" => 150,
                "rot" => "",
                "timestamp" => "2013-07-01 17:39:00",
                "created_at" => "2023-09-20T18:03:19.000000Z",
                "updated_at" => "2023-09-20T18:03:19.000000Z",
                "deleted_at" => null
            ],
            [
                "id" => 4,
                "mmsi" => 247039300,
                "status" => 0,
                "stationId" => 84,
                "speed" => 156,
                "lon" => "16.80937",
                "lat" => "41.34813",
                "course" => 123,
                "heading" => 124,
                "rot" => "",
                "timestamp" => "2013-07-01 17:42:00",
                "created_at" => "2023-09-20T18:03:19.000000Z",
                "updated_at" => "2023-09-20T18:03:19.000000Z",
                "deleted_at" => null
            ]
        ];
    }

    /** @test */
    public function hal_test()
    {

        $hal = new JsonHalHandler();

        $response = $hal->handle($this->content);

        $this->assertStringContainsString('_embedded', $response);
        $this->assertEquals(1, substr_count($response, '_embedded'));

        $this->assertStringContainsString('resource', $response);
        $this->assertEquals(1, substr_count($response, 'resource'));

        $this->assertStringContainsString('_links', $response);
        $this->assertEquals(3, substr_count($response, '_links'));

        foreach (\App\Models\VesselTrack::$exportable as $key) {
            $this->assertStringContainsString($key, $response);
            $this->assertEquals(2, substr_count($response, $key));
        }

        foreach ($this->content as $content) {
            $this->assertStringContainsString('http:\/\/localhost\/data\/' . $content['mmsi'], $response);
            $this->assertEquals(2, substr_count($response, 'http:\/\/localhost\/data\/' . $content['mmsi']));
        }
    }

    /** @test */
    public function csv_test()
    {

        $hal = new JsonHalHandler();

        $response = $hal->handle($this->content);

        $this->assertStringContainsString('_embedded', $response);
        $this->assertEquals(1, substr_count($response, '_embedded'));

        $this->assertStringContainsString('resource', $response);
        $this->assertEquals(1, substr_count($response, 'resource'));

        $this->assertStringContainsString('_links', $response);
        $this->assertEquals(3, substr_count($response, '_links'));

        foreach (\App\Models\VesselTrack::$exportable as $key) {
            $this->assertStringContainsString($key, $response);
            $this->assertEquals(2, substr_count($response, $key));
        }

        foreach ($this->content as $content) {
            $this->assertStringContainsString('http:\/\/localhost\/data\/' . $content['mmsi'], $response);
            $this->assertEquals(2, substr_count($response, 'http:\/\/localhost\/data\/' . $content['mmsi']));
        }
    }

    /** @test */
    public function xml_test()
    {

        $hal = new JsonHalHandler();

        $response = $hal->handle($this->content);

        $this->assertStringContainsString('_embedded', $response);
        $this->assertEquals(1, substr_count($response, '_embedded'));

        $this->assertStringContainsString('resource', $response);
        $this->assertEquals(1, substr_count($response, 'resource'));

        $this->assertStringContainsString('_links', $response);
        $this->assertEquals(3, substr_count($response, '_links'));

        foreach (\App\Models\VesselTrack::$exportable as $key) {
            $this->assertStringContainsString($key, $response);
            $this->assertEquals(2, substr_count($response, $key));
        }

        foreach ($this->content as $content) {
            $this->assertStringContainsString('http:\/\/localhost\/data\/' . $content['mmsi'], $response);
            $this->assertEquals(2, substr_count($response, 'http:\/\/localhost\/data\/' . $content['mmsi']));
        }
    }

}
